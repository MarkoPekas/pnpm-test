import type { NextApiRequest, NextApiResponse } from 'next'

const letterDefaults = {
  'a': 'm 7 10 c -2 -2 0 -3 -2 -5 c -6 -4 -7 9 1 4',
  'b': 'm 0 0 c 1 4.6667 -2 14 3 14 c 4 0 5 -1 4 -5 c -2 -3 -5 -2 -7 0',
  'c': 'm 6 8 c -5 -3.3333 -7 1 -5 5 c 2 2 5 1 6 -1',
  'd': 'm 7 8 c -6 -3.3333 -8 1 -6 5 c 2 2 5 1 6 -1 c 1 -3 -1 -7 0 -12',
  'e': 'm 1 11 c 3 0 6 -2 5 -3 c -5 -3.3333 -7 1 -5 5 c 2 2 5 1 6 -1',
  'f': 'm 7 6 c 0 -1 -2 -4 -4 -3 c -2 1.6667 -2 6 -1 11 c 1 1 1 -8 -2 -7',
  'g': 'm 2 10 c 1 2 3 2 4 0 c 1 -4 1 -7 -3 -6 c -2 1 -2 5 3 4',
  'h': 'm 7 12 c -1 -8 -5 -6 -5 0 c 0 0 0 -2 0 -3 c 0 -3 0 -5 -1 -7',
  'i': 'm 3 11 c 0 -3 0 -3 0 -6',
  'j': 'm 1 11 c 2 3 2 -1 2 -8',
  'k': 'm 7 12 c -3 -1 -3 -3 -5 -3 c 4 -2 5 -4 4 -4 c -4 4 -4 8 -3 7 c 0 -2 1 -5 0 -11',
  'l': 'm 0 0 c 0 11 0 13 2 11',
  'm': 'm 6 10 c 0 -4 -3 -5 -3 0 c 0 -6 -3 -3 -2 1',
  'n': 'm 6 10 c 0 -4 -5 -7 -5 0',
  'o': 'm 6 8 c 1 -3 -5 -4 -5 0 C 1 11 5 11 6 8',
  'p': 'm 1 6 c 7 4 10 -5 4 -5 c -6 0 -5 2 -5 16',
  'q': 'm 8 14 l -1 3 c -2 -9 0 -10 -2 -12 c -6 -4 -7 9 1 4',
  'r': 'm 1 10 c -1 -8 1 -10 7 -8',
  's': 'm 3 9 c 9 -1 6 -4 1 -4 c -5 0 -2 -5 3 -4',
  't': 'm 6 14 c -5 0 -2 -5 -2 -14 c -1 8 8 8 -3 8',
  'u': 'm 11 4 c 0 9 -9 9 -9 0',
  'v': 'm 11 4 c -5 9 -5 9 -9 0',
  'w': 'm 11 4 C 7 12 9 12 6 5 c -4 7 -3 7 -5 -2',
  'x': 'm 3 3 C 5.6667 6.3333 8.3333 9.6667 11 13 C 9.6667 11.3333 8.3333 9.6667 7 8 C -3 18 9.6667 5.3333 11 4',
  'y': 'm 0 0 c 4 10 6 7 9 0 c -2.6667 4.3333 -4 14 -8 13',
  'z': 'm 0 0 c 12 0 9 -1 0 11 c 3 -1 5.3333 0 9 0',
  ' ': 'm 0 0',
  'A': 'm 15 11 c -5 -13 -3 -6 -9 -20 c -2 8 -3 10 -6 20 m 3 -10 c 2.6667 -0.3333 4 -1 8 -1',
  'B': 'm 0 1 c 13 -2 11 -11 0 -11 c -1 4 1 17 0 21 c 16 1 14 -13 0 -10',
  'C': 'm 10 -4 c -18 -12 -15 22 0 9',
  'D': 'm 0 -10 c -1 4 0 17.3333 0 21 c 20 -5 14 -18 0 -21',
  'E': 'm 11 -9 c -5 1 -11 -0.3333 -11 0 c -1 2 0 15.6667 0 19 c 4 0 8 1 12 0 m -13 -10 c 3 0 3 1 9 0',
  'F': 'm 11 -9 c -5 1 -11 -0.3333 -11 0 c -1 2 0 15.6667 0 19 m -1 -10 c 2 -1 4 1 9 0 m -13 -10 c 3 0 3 1 9 0',
  'G': 'm 7 1 c 2 1 4 0 6 1 c -1 8 -13 11 -13 -3 c 0 -8 10 -10 13 -1',
  'H': 'm 0 8 c 1 -8 0 -13.3333 0 -16 m 0 8 c 2.6667 0 4 -1 8 0 m 0 -8 c 0 5.3333 -1 10 0 16',
  'I': 'm 0 8 c 1 -9 0 -12 0 -16',
  'J': 'm 2 3 c 0 4 2 5 4 5 c 5 0 4 -10 3 -16',
  'K': 'm 0 -8 c 1 10 0 13.3333 0 16 m 8 0 c -6 -3 -8 -6 -8 -8 c 2 -2.6667 4 -4 6 -8',
  'L': 'm 9 8 c -6 1 -8 0 -9 0 c -1 -9 0 -13.3333 0 -16',
  'M': 'm 10 8 c 0 -5 -1 -10 -2 -15 c -2 6 -2 6 -4 10 c -2.3333 -11 -2.6667 -11 -3 -11 c -1 10.6667 -1 13.3333 -1 16',
  'N': 'm 10 -8 c 0 8 -1 11 -1 17 c -5 -12 -7.6667 -17 -8 -17 c -1 11 -1 14 -1 17',
  'O': 'm 0 0 c 0 -12 15 -11 15 0 c 0 10 -15 10 -15 0',
  'P': 'm 0 12 c -1 -13 0 -17.3333 0 -20 c 13 -2 13 6 0 11',
  'Q': 'm 0 0 c 0 -9 12 -8 12 0 c 0 8 -12 9 -12 0 m 8 3 l 5 4',
  'R': 'm 8 11 c -8 -9.3333 -8 -9.6667 -8 -10 c 12 -3 9 -10 0 -10 c -1 11 0 15 0 20',
  'S': 'm 1 5 c 8 4 13 -4 6 -5 c -11 -2 -4 -10 3 -4',
  'T': 'm 5 -8 c 1 11 0 11 1 18 m -8 -18 c 5 -0.3333 12 0 15 -1',
  'U': 'm 0 -6 c 0 18 13 19 13 0',
  'V': 'm 0 -6 c 8 19 5 19 13 0',
  'W': 'm 0 -6 c 4 19 1 19 7 6 c 7 13 3 13 8 -6',
  'X': 'm 0 -8 c 4.3333 11.6667 8.6667 15.3333 13 19 m 0 -19 c -4.3333 6.3333 -8 7 -13 19',
  'Y': 'm 0 -8 c 7 8 6 9 6 19 m 6 -19 c -4 3 -5 7 -6 9',
  'Z': 'm 0 -6 c 16 0 15 -1 0 15 c 6 0 7 -1 12 0',
  '0': 'm 0 0 c 0 -12 15 -11 15 0 c 0 10 -15 10 -15 0',
  '1': 'm 0 8 c 1 -9 0 -12 0 -16',
  '2': 'm 0 -5 c 8 -5 21 2 0 15 c 6 0 7 -1 12 0',
  '3': 'm 0 -6 c 5 -7 20 1 5 5 c 10 -2 15 11 -5 9',
  '4': 'm 8 -9 c -4 4 -7 11 -8 15 c 4 -1 7.3333 0 11 0 m -5 -3 c 0 2.3333 0 4.6667 0 7',
  '5': 'm 10 -6 c -4 -1 -7 0 -10 0 c 0 2 0 4 0 6 c 12 -3 18 6 0 9',
  '6': 'm 9 -8 c -7 5 -9 13.3333 -9 16 c 0 5 12 6 10 -3 c -1 -3 -5 -3 -9 -2',
  '7': 'm 0 -6 c 3.6667 0 7.3333 0 11 0 c -3.6667 5.6667 -7 8 -11 17',
  '8': 'm 4 -6 c -4 0 -5 7 0 7 c 7 0 7 10 0 10 c -7 0 -5 -10 0 -10 c 6 0 4 -7 0 -7',
  '9': 'm 8 0 c -3 4 -8 5 -8 -3 c 0 -4 8 -4 8 1 c 0 4.3333 0 8.6667 -1 13',
  '-': 'm 0 2 c 3 0 5.3333 -0.6667 8 0',
  '_': 'm 0 9 c 3 0 4 -1 8 0',
  '?': 'm 0 1 c 0 -8 8 -7 8 -1 c 0 4 -4 0 -4 9',
  '!': 'm 0 8 c 1 -9 0 -12 0 -16',
}

const slightRandomize = (str: string) => {
  // get every number in the string (split by spaces) and randomize it by up to 5%
  const numbers = str.split(' ').map((num, i) => {
    if (isNaN(Number(num))) return num
    const numInt = parseInt(num, 10)
    if (numInt) {
      return Math.round(numInt * (Math.random() * (i<4?0.05:0.35) + 1) * 10) /10
    }
    return num
  })
  return numbers.join(' ')
}

export default (req: NextApiRequest, res: NextApiResponse) => {
  const data = req.body.data

  let paths = []
  data.split('').forEach((char: string) => {
    paths.push(slightRandomize(letterDefaults[char]||letterDefaults[' ']))
  })

  res.status(200).json(paths)
}